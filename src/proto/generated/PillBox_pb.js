// source: PillBox.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.com.andrei.ds.MedicationItem', null, global);
goog.exportSymbol('proto.com.andrei.ds.MedicationNotTakenRequest', null, global);
goog.exportSymbol('proto.com.andrei.ds.MedicationNotTakenResponse', null, global);
goog.exportSymbol('proto.com.andrei.ds.MedicationPlanRequest', null, global);
goog.exportSymbol('proto.com.andrei.ds.MedicationPlanResponse', null, global);
goog.exportSymbol('proto.com.andrei.ds.MedicationTakenRequest', null, global);
goog.exportSymbol('proto.com.andrei.ds.MedicationTakenResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.andrei.ds.MedicationPlanRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.andrei.ds.MedicationPlanRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.andrei.ds.MedicationPlanRequest.displayName = 'proto.com.andrei.ds.MedicationPlanRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.andrei.ds.MedicationPlanResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.andrei.ds.MedicationPlanResponse.repeatedFields_, null);
};
goog.inherits(proto.com.andrei.ds.MedicationPlanResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.andrei.ds.MedicationPlanResponse.displayName = 'proto.com.andrei.ds.MedicationPlanResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.andrei.ds.MedicationItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.andrei.ds.MedicationItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.andrei.ds.MedicationItem.displayName = 'proto.com.andrei.ds.MedicationItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.andrei.ds.MedicationTakenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.andrei.ds.MedicationTakenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.andrei.ds.MedicationTakenRequest.displayName = 'proto.com.andrei.ds.MedicationTakenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.andrei.ds.MedicationTakenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.andrei.ds.MedicationTakenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.andrei.ds.MedicationTakenResponse.displayName = 'proto.com.andrei.ds.MedicationTakenResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.andrei.ds.MedicationNotTakenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.andrei.ds.MedicationNotTakenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.andrei.ds.MedicationNotTakenRequest.displayName = 'proto.com.andrei.ds.MedicationNotTakenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.andrei.ds.MedicationNotTakenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.andrei.ds.MedicationNotTakenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.andrei.ds.MedicationNotTakenResponse.displayName = 'proto.com.andrei.ds.MedicationNotTakenResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.andrei.ds.MedicationPlanRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.andrei.ds.MedicationPlanRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.andrei.ds.MedicationPlanRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.andrei.ds.MedicationPlanRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    patientid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.andrei.ds.MedicationPlanRequest}
 */
proto.com.andrei.ds.MedicationPlanRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.andrei.ds.MedicationPlanRequest;
  return proto.com.andrei.ds.MedicationPlanRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.andrei.ds.MedicationPlanRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.andrei.ds.MedicationPlanRequest}
 */
proto.com.andrei.ds.MedicationPlanRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPatientid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.andrei.ds.MedicationPlanRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.andrei.ds.MedicationPlanRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.andrei.ds.MedicationPlanRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.andrei.ds.MedicationPlanRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPatientid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string patientId = 1;
 * @return {string}
 */
proto.com.andrei.ds.MedicationPlanRequest.prototype.getPatientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.andrei.ds.MedicationPlanRequest} returns this
 */
proto.com.andrei.ds.MedicationPlanRequest.prototype.setPatientid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.andrei.ds.MedicationPlanResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.andrei.ds.MedicationPlanResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.andrei.ds.MedicationPlanResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.andrei.ds.MedicationPlanResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.andrei.ds.MedicationPlanResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    patientid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.com.andrei.ds.MedicationItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.andrei.ds.MedicationPlanResponse}
 */
proto.com.andrei.ds.MedicationPlanResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.andrei.ds.MedicationPlanResponse;
  return proto.com.andrei.ds.MedicationPlanResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.andrei.ds.MedicationPlanResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.andrei.ds.MedicationPlanResponse}
 */
proto.com.andrei.ds.MedicationPlanResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPatientid(value);
      break;
    case 2:
      var value = new proto.com.andrei.ds.MedicationItem;
      reader.readMessage(value,proto.com.andrei.ds.MedicationItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.andrei.ds.MedicationPlanResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.andrei.ds.MedicationPlanResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.andrei.ds.MedicationPlanResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.andrei.ds.MedicationPlanResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPatientid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.com.andrei.ds.MedicationItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional string patientId = 1;
 * @return {string}
 */
proto.com.andrei.ds.MedicationPlanResponse.prototype.getPatientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.andrei.ds.MedicationPlanResponse} returns this
 */
proto.com.andrei.ds.MedicationPlanResponse.prototype.setPatientid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated MedicationItem items = 2;
 * @return {!Array<!proto.com.andrei.ds.MedicationItem>}
 */
proto.com.andrei.ds.MedicationPlanResponse.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.com.andrei.ds.MedicationItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.andrei.ds.MedicationItem, 2));
};


/**
 * @param {!Array<!proto.com.andrei.ds.MedicationItem>} value
 * @return {!proto.com.andrei.ds.MedicationPlanResponse} returns this
*/
proto.com.andrei.ds.MedicationPlanResponse.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.com.andrei.ds.MedicationItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.andrei.ds.MedicationItem}
 */
proto.com.andrei.ds.MedicationPlanResponse.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.com.andrei.ds.MedicationItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.andrei.ds.MedicationPlanResponse} returns this
 */
proto.com.andrei.ds.MedicationPlanResponse.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.andrei.ds.MedicationItem.prototype.toObject = function(opt_includeInstance) {
  return proto.com.andrei.ds.MedicationItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.andrei.ds.MedicationItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.andrei.ds.MedicationItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    drugname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dosage: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.andrei.ds.MedicationItem}
 */
proto.com.andrei.ds.MedicationItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.andrei.ds.MedicationItem;
  return proto.com.andrei.ds.MedicationItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.andrei.ds.MedicationItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.andrei.ds.MedicationItem}
 */
proto.com.andrei.ds.MedicationItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDrugname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDosage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.andrei.ds.MedicationItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.andrei.ds.MedicationItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.andrei.ds.MedicationItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.andrei.ds.MedicationItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDrugname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDosage();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string drugName = 1;
 * @return {string}
 */
proto.com.andrei.ds.MedicationItem.prototype.getDrugname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.andrei.ds.MedicationItem} returns this
 */
proto.com.andrei.ds.MedicationItem.prototype.setDrugname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 dosage = 2;
 * @return {number}
 */
proto.com.andrei.ds.MedicationItem.prototype.getDosage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.andrei.ds.MedicationItem} returns this
 */
proto.com.andrei.ds.MedicationItem.prototype.setDosage = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.andrei.ds.MedicationTakenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.andrei.ds.MedicationTakenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.andrei.ds.MedicationTakenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.andrei.ds.MedicationTakenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    patientid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    drugname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.andrei.ds.MedicationTakenRequest}
 */
proto.com.andrei.ds.MedicationTakenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.andrei.ds.MedicationTakenRequest;
  return proto.com.andrei.ds.MedicationTakenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.andrei.ds.MedicationTakenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.andrei.ds.MedicationTakenRequest}
 */
proto.com.andrei.ds.MedicationTakenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPatientid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDrugname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.andrei.ds.MedicationTakenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.andrei.ds.MedicationTakenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.andrei.ds.MedicationTakenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.andrei.ds.MedicationTakenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPatientid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDrugname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string patientId = 1;
 * @return {string}
 */
proto.com.andrei.ds.MedicationTakenRequest.prototype.getPatientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.andrei.ds.MedicationTakenRequest} returns this
 */
proto.com.andrei.ds.MedicationTakenRequest.prototype.setPatientid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string drugName = 2;
 * @return {string}
 */
proto.com.andrei.ds.MedicationTakenRequest.prototype.getDrugname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.andrei.ds.MedicationTakenRequest} returns this
 */
proto.com.andrei.ds.MedicationTakenRequest.prototype.setDrugname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.andrei.ds.MedicationTakenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.andrei.ds.MedicationTakenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.andrei.ds.MedicationTakenResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.andrei.ds.MedicationTakenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    patientid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    drugname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    acknowledged: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.andrei.ds.MedicationTakenResponse}
 */
proto.com.andrei.ds.MedicationTakenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.andrei.ds.MedicationTakenResponse;
  return proto.com.andrei.ds.MedicationTakenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.andrei.ds.MedicationTakenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.andrei.ds.MedicationTakenResponse}
 */
proto.com.andrei.ds.MedicationTakenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPatientid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDrugname(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAcknowledged(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.andrei.ds.MedicationTakenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.andrei.ds.MedicationTakenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.andrei.ds.MedicationTakenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.andrei.ds.MedicationTakenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPatientid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDrugname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAcknowledged();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string patientId = 1;
 * @return {string}
 */
proto.com.andrei.ds.MedicationTakenResponse.prototype.getPatientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.andrei.ds.MedicationTakenResponse} returns this
 */
proto.com.andrei.ds.MedicationTakenResponse.prototype.setPatientid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string drugName = 2;
 * @return {string}
 */
proto.com.andrei.ds.MedicationTakenResponse.prototype.getDrugname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.andrei.ds.MedicationTakenResponse} returns this
 */
proto.com.andrei.ds.MedicationTakenResponse.prototype.setDrugname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool acknowledged = 3;
 * @return {boolean}
 */
proto.com.andrei.ds.MedicationTakenResponse.prototype.getAcknowledged = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.andrei.ds.MedicationTakenResponse} returns this
 */
proto.com.andrei.ds.MedicationTakenResponse.prototype.setAcknowledged = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.andrei.ds.MedicationNotTakenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.andrei.ds.MedicationNotTakenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.andrei.ds.MedicationNotTakenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.andrei.ds.MedicationNotTakenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    patientid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    drugname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.andrei.ds.MedicationNotTakenRequest}
 */
proto.com.andrei.ds.MedicationNotTakenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.andrei.ds.MedicationNotTakenRequest;
  return proto.com.andrei.ds.MedicationNotTakenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.andrei.ds.MedicationNotTakenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.andrei.ds.MedicationNotTakenRequest}
 */
proto.com.andrei.ds.MedicationNotTakenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPatientid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDrugname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.andrei.ds.MedicationNotTakenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.andrei.ds.MedicationNotTakenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.andrei.ds.MedicationNotTakenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.andrei.ds.MedicationNotTakenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPatientid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDrugname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string patientId = 1;
 * @return {string}
 */
proto.com.andrei.ds.MedicationNotTakenRequest.prototype.getPatientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.andrei.ds.MedicationNotTakenRequest} returns this
 */
proto.com.andrei.ds.MedicationNotTakenRequest.prototype.setPatientid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string drugName = 2;
 * @return {string}
 */
proto.com.andrei.ds.MedicationNotTakenRequest.prototype.getDrugname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.andrei.ds.MedicationNotTakenRequest} returns this
 */
proto.com.andrei.ds.MedicationNotTakenRequest.prototype.setDrugname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.andrei.ds.MedicationNotTakenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.andrei.ds.MedicationNotTakenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.andrei.ds.MedicationNotTakenResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.andrei.ds.MedicationNotTakenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    patientid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    drugname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    acknowledged: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.andrei.ds.MedicationNotTakenResponse}
 */
proto.com.andrei.ds.MedicationNotTakenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.andrei.ds.MedicationNotTakenResponse;
  return proto.com.andrei.ds.MedicationNotTakenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.andrei.ds.MedicationNotTakenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.andrei.ds.MedicationNotTakenResponse}
 */
proto.com.andrei.ds.MedicationNotTakenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPatientid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDrugname(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAcknowledged(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.andrei.ds.MedicationNotTakenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.andrei.ds.MedicationNotTakenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.andrei.ds.MedicationNotTakenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.andrei.ds.MedicationNotTakenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPatientid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDrugname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAcknowledged();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string patientId = 1;
 * @return {string}
 */
proto.com.andrei.ds.MedicationNotTakenResponse.prototype.getPatientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.andrei.ds.MedicationNotTakenResponse} returns this
 */
proto.com.andrei.ds.MedicationNotTakenResponse.prototype.setPatientid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string drugName = 2;
 * @return {string}
 */
proto.com.andrei.ds.MedicationNotTakenResponse.prototype.getDrugname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.andrei.ds.MedicationNotTakenResponse} returns this
 */
proto.com.andrei.ds.MedicationNotTakenResponse.prototype.setDrugname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool acknowledged = 3;
 * @return {boolean}
 */
proto.com.andrei.ds.MedicationNotTakenResponse.prototype.getAcknowledged = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.andrei.ds.MedicationNotTakenResponse} returns this
 */
proto.com.andrei.ds.MedicationNotTakenResponse.prototype.setAcknowledged = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


goog.object.extend(exports, proto.com.andrei.ds);
